// Code generated by protoc-gen-go. DO NOT EDIT.
// source: weather.proto

package weatherParse

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WeatherParams struct {
	MonthsNumbers        []int32  `protobuf:"varint,1,rep,packed,name=MonthsNumbers,proto3" json:"MonthsNumbers,omitempty"`
	Cities               []string `protobuf:"bytes,2,rep,name=Cities,proto3" json:"Cities,omitempty"`
	Site                 string   `protobuf:"bytes,3,opt,name=Site,proto3" json:"Site,omitempty"`
	Months               []string `protobuf:"bytes,4,rep,name=Months,proto3" json:"Months,omitempty"`
	Year                 string   `protobuf:"bytes,5,opt,name=Year,proto3" json:"Year,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeatherParams) Reset()         { *m = WeatherParams{} }
func (m *WeatherParams) String() string { return proto.CompactTextString(m) }
func (*WeatherParams) ProtoMessage()    {}
func (*WeatherParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_231dcd72b885f4be, []int{0}
}

func (m *WeatherParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherParams.Unmarshal(m, b)
}
func (m *WeatherParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherParams.Marshal(b, m, deterministic)
}
func (m *WeatherParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherParams.Merge(m, src)
}
func (m *WeatherParams) XXX_Size() int {
	return xxx_messageInfo_WeatherParams.Size(m)
}
func (m *WeatherParams) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherParams.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherParams proto.InternalMessageInfo

func (m *WeatherParams) GetMonthsNumbers() []int32 {
	if m != nil {
		return m.MonthsNumbers
	}
	return nil
}

func (m *WeatherParams) GetCities() []string {
	if m != nil {
		return m.Cities
	}
	return nil
}

func (m *WeatherParams) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *WeatherParams) GetMonths() []string {
	if m != nil {
		return m.Months
	}
	return nil
}

func (m *WeatherParams) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

type WeatherResponse struct {
	ComparisonCSV        []byte   `protobuf:"bytes,1,opt,name=ComparisonCSV,proto3" json:"ComparisonCSV,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeatherResponse) Reset()         { *m = WeatherResponse{} }
func (m *WeatherResponse) String() string { return proto.CompactTextString(m) }
func (*WeatherResponse) ProtoMessage()    {}
func (*WeatherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_231dcd72b885f4be, []int{1}
}

func (m *WeatherResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherResponse.Unmarshal(m, b)
}
func (m *WeatherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherResponse.Marshal(b, m, deterministic)
}
func (m *WeatherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherResponse.Merge(m, src)
}
func (m *WeatherResponse) XXX_Size() int {
	return xxx_messageInfo_WeatherResponse.Size(m)
}
func (m *WeatherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherResponse proto.InternalMessageInfo

func (m *WeatherResponse) GetComparisonCSV() []byte {
	if m != nil {
		return m.ComparisonCSV
	}
	return nil
}

func init() {
	proto.RegisterType((*WeatherParams)(nil), "weatherParse.WeatherParams")
	proto.RegisterType((*WeatherResponse)(nil), "weatherParse.WeatherResponse")
}

func init() { proto.RegisterFile("weather.proto", fileDescriptor_231dcd72b885f4be) }

var fileDescriptor_231dcd72b885f4be = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4f, 0x4d, 0x2c,
	0xc9, 0x48, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x81, 0x72, 0x03, 0x12, 0x8b,
	0x8a, 0x53, 0x95, 0x7a, 0x19, 0xb9, 0x78, 0xc3, 0xe1, 0x02, 0x89, 0xb9, 0xc5, 0x42, 0x2a, 0x5c,
	0xbc, 0xbe, 0xf9, 0x79, 0x25, 0x19, 0xc5, 0x7e, 0xa5, 0xb9, 0x49, 0xa9, 0x45, 0xc5, 0x12, 0x8c,
	0x0a, 0xcc, 0x1a, 0xac, 0x41, 0xa8, 0x82, 0x42, 0x62, 0x5c, 0x6c, 0xce, 0x99, 0x25, 0x99, 0xa9,
	0xc5, 0x12, 0x4c, 0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x90, 0x10, 0x17, 0x4b, 0x70, 0x66,
	0x49, 0xaa, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0x0d, 0x52, 0x0b, 0xd1, 0x2c, 0xc1,
	0x02, 0x51, 0x0b, 0xe1, 0x81, 0xd4, 0x46, 0xa6, 0x26, 0x16, 0x49, 0xb0, 0x42, 0xd4, 0x82, 0xd8,
	0x4a, 0xe6, 0x5c, 0xfc, 0x50, 0xe7, 0x04, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x82, 0x1c,
	0xe4, 0x9c, 0x9f, 0x5b, 0x90, 0x58, 0x94, 0x59, 0x9c, 0x9f, 0xe7, 0x1c, 0x1c, 0x26, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x13, 0x84, 0x2a, 0x68, 0x14, 0x0d, 0xf7, 0x27, 0xd8, 0x63, 0x45, 0x42, 0x5e,
	0x5c, 0x5c, 0xe9, 0xa9, 0x25, 0x50, 0xc3, 0x84, 0xa4, 0xf5, 0x90, 0x65, 0xf5, 0x50, 0xbc, 0x2c,
	0x25, 0x8b, 0x55, 0x12, 0xe6, 0x00, 0x25, 0x86, 0x24, 0x36, 0x70, 0xd0, 0x19, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x2e, 0x7d, 0x16, 0xee, 0x4b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WeatherParserClient is the client API for WeatherParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WeatherParserClient interface {
	GetWeather(ctx context.Context, in *WeatherParams, opts ...grpc.CallOption) (*WeatherResponse, error)
}

type weatherParserClient struct {
	cc *grpc.ClientConn
}

func NewWeatherParserClient(cc *grpc.ClientConn) WeatherParserClient {
	return &weatherParserClient{cc}
}

func (c *weatherParserClient) GetWeather(ctx context.Context, in *WeatherParams, opts ...grpc.CallOption) (*WeatherResponse, error) {
	out := new(WeatherResponse)
	err := c.cc.Invoke(ctx, "/weatherParse.weatherParser/getWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherParserServer is the server API for WeatherParser service.
type WeatherParserServer interface {
	GetWeather(context.Context, *WeatherParams) (*WeatherResponse, error)
}

// UnimplementedWeatherParserServer can be embedded to have forward compatible implementations.
type UnimplementedWeatherParserServer struct {
}

func (*UnimplementedWeatherParserServer) GetWeather(ctx context.Context, req *WeatherParams) (*WeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeather not implemented")
}

func RegisterWeatherParserServer(s *grpc.Server, srv WeatherParserServer) {
	s.RegisterService(&_WeatherParser_serviceDesc, srv)
}

func _WeatherParser_GetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherParserServer).GetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weatherParse.weatherParser/GetWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherParserServer).GetWeather(ctx, req.(*WeatherParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _WeatherParser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weatherParse.weatherParser",
	HandlerType: (*WeatherParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getWeather",
			Handler:    _WeatherParser_GetWeather_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weather.proto",
}
